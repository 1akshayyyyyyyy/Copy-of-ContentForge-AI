import { GoogleGenAI } from "@google/genai";
import type { NextApiRequest, NextApiResponse } from 'next';

if (!process.env.GEMINI_API_KEY) {
    throw new Error("GEMINI_API_KEY environment variable is not set");
}

const ai = new GoogleGenAI(process.env.GEMINI_API_KEY);

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    const { prompt } = req.body;

    if (!prompt) {
        return res.status(400).json({ error: 'Missing prompt' });
    }

    try {
        const response = await ai.getGenerativeModel({model: 'imagen-3.0-generate-001'}).generateContent({
            contents: [{role: "user", parts: [{text: prompt}]}],
            generationConfig: {
                responseMimeType: 'image/jpeg',
            }
        });

        // @ts-ignore
        if (response.response.candidates && response.response.candidates.length > 0) {
            // @ts-ignore
            const base64ImageBytes: string = response.response.candidates[0].content.parts[0].fileData.fileUri;
            const imageUrl = `data:image/jpeg;base64,${base64ImageBytes}`;
            return res.status(200).json({ imageUrl });
        }

        throw new Error("No image was generated by the model.");

    } catch (error) {
        console.error("Error generating image:", error);
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        res.status(500).json({ error: "Failed to generate image with AI model.", details: errorMessage });
    }
}
